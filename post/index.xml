<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on mino0123.github.io </title>
    <link>http://mino0123.github.io/5cpost5cindex.html/</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Sun, 14 Dec 2014 06:00:00 JST</updated>
    
    <item>
      <title>Lightning App Builder</title>
      <link>http://mino0123.github.io/2014/12/14/LightningAppBuilder</link>
      <pubDate>Sun, 14 Dec 2014 06:00:00 JST</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://mino0123.github.io/2014/12/14/LightningAppBuilder</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/salesforce1&#34;&gt;Salesforce1 Advent Calendar&lt;/a&gt;
14日目の記事です。&lt;/p&gt;

&lt;p&gt;Lightning App Builder についてデモ動画、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=f9HvfbNh70M&amp;amp;list=UUEWplP9qrhNjXVggK5W5CvA&#34;&gt;Salesforce World Tour Tokyo(2014年12月) - ～IoTと次世代モバイルアプリの最新事例紹介～アプリの開発スピードを革新するSalesforce1 Lightning～&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;から得られる情報をまとめます。&lt;/p&gt;

&lt;p&gt;ちなみにまだデモで存在するだけなため、リリースまでにいろいろ変更される可能性があります。&lt;/p&gt;

&lt;!--
[developer.salesforce.com/lightning](https://developer.salesforce.com/lightning)
--&gt;

&lt;p&gt;まずは App Builder に入る前のビューですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/FlexiPageList.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/FlexiPageList.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ビジュアルアプリケーションビルダーには、Flexible Pagesを使用してSalesforce1 のカスタムアプリケーションページを作成するための使いやすいグラフィカルインターフェースが用意されています。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書かれています。&lt;/p&gt;

&lt;p&gt;要するにLightning App Builder は Flexible Page をGUIで作成できるもの、ということでしょう。&lt;/p&gt;

&lt;!-- ビューのURLは https://ap1.salesforce.com/_ui/flexipage/ui/FlexiPageListUi/d --&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder01.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder01.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新規ボタンを押した後に立ち上がる App Builder の画面です。&lt;/p&gt;

&lt;p&gt;作成する画面の種別を3種類から選ぶようです。&lt;/p&gt;

&lt;p&gt;これによって作成したページを割り当てできる箇所が変わるのでしょう。&lt;/p&gt;

&lt;p&gt;翻訳後のレイアウト調整がまだなのか少しページが崩れていますが、本リリースまでには直ることでしょう多分。&lt;/p&gt;

&lt;p&gt;ページ種別を選択するとページのテンプレートの選択に移行します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートA(1領域)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder02.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder02.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートB(2領域)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder03.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder03.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートC(3領域)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder04.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder04.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まとめると、最大3つのエリアをもつページを作成することができ、&lt;/p&gt;

&lt;p&gt;各エリアはページを参照する端末によって表示される箇所が変わる、ということのようです。&lt;/p&gt;

&lt;p&gt;下に「AppExchange上でテンプレートを探す」というリンクがありますので
もしかするとこれ以外のレイアウトもテンプレートとして作成・公開できるようになるのでしょうか。&lt;/p&gt;

&lt;p&gt;テンプレートを選択すると最後にページの名前を設定してドラッグ&amp;amp;ドロップによるページ作成が始まります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder05.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder05.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[標準コンポーネント], [カスタムコンポーネント] の下に [AppExchangeコンポーネント] が並んでいるのが分かります。&lt;/p&gt;

&lt;p&gt;いままでは ユーザがD&amp;amp;Dで設定できてAppExchangeで公開できるUIはVisualforceページのみだった
(カスタムコンポーネントでコンポーネント単位の公開はできるけど使用するのにコーディングが必要)
のが、コンポーネント単位で公開しそこからユーザがD&amp;amp;Dでページに組み込むことができるようになるようです。&lt;/p&gt;

&lt;p&gt;ページの設定の一番下に[処理]とありますが、Lightning Process Builderで作成した処理を割り当てたりできるのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder06.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder06.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder09.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder09.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プレビューの端末を変更することもできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/img/2014/12/14/LightningAppBuilder10.png&#34; target=&#34;_blank&#34;&gt;
    &lt;img src=&#34;/img/2014/12/14/LightningAppBuilder10.png&#34; style=&#34;width:100%;max-width:800px;&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;まとめ:efbb8997069fcf1a0878ff17f0598ba5&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;いままでの Salesforce は AppExchange で公開されたものをコーディングなしで自組織に組み込むことのできるUIとしてはVisualforceページが最小単位だったと思いますが、テンプレートやコンポーネントなど、より小さな単位でAppExchangeで公開可能にすることを目指しているようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログを新しくした</title>
      <link>http://mino0123.github.io/2014/12/07/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0</link>
      <pubDate>Sun, 07 Dec 2014 04:00:00 JST</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://mino0123.github.io/2014/12/07/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0</guid>
      <description>

&lt;p&gt;golang製の静的サイトジェネレータである &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; を使った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/spf13/hugo/tree/master/examples/blog&#34;&gt;examples/blog&lt;/a&gt;
 がそのまま動いたのでうまくいくかと思いきや、そこそこ面倒くさかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;configでパーマリンクを指定したとき、日本語が含まれていると生成されるファイルだけパーセントエンコードされリンクが切れる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;それを直そうとcloneしてきたら path.Join 使ってたところがすべて filepath.Join になっててWindowsだとファイル区切りが\になってた。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そもそも url と生成時のファイル生成のパスの扱いが同じ関数で行われている。&lt;/p&gt;

&lt;p&gt;結局、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hugolib/permalinks.go 内 pageToPermalinkFilename で Urlize を止める。&lt;/li&gt;
&lt;li&gt;helpers/url.go の filepath を path にもどす。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という修正をやって動かしてる。&lt;/p&gt;

&lt;p&gt;後者に関してはissueは挙がってたしそのうち直るだろうたぶん。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/issues/604&#34;&gt;#604 Wrong directory generated for newly created content on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/issues/660&#34;&gt;#660 Failing unit tests on windows due forward slash vs back slash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/issues/687&#34;&gt;#687 MakePermalink generate backslash on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとコードのハイライトは pygments 使おうと思ったけどなぜかpタグがcode内にでてくる
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;’&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

ので Hilight.js の monokai sublime テーマにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function func() {
    var v;
    v = 0;
    v = &#39;string&#39;;
    v = function () {};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;追記:d53c10dd05a7c61b37271a603513f0e7&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;静的ファイルの追加が何故か1フォルダしか行われていなかった。
chtimeで権限エラーになっていた。
hugo.go で NewSyncer 後に
&lt;code&gt;go
syncer.NoTimes = true
&lt;/code&gt;
を追加することで最終更新日の同期をやめさせて対応した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-patch&#34;&gt;diff --git a/commands/hugo.go b/commands/hugo.go
index 6fd7fa2..21dad47 100644
--- a/commands/hugo.go
+++ b/commands/hugo.go
@@ -227,6 +229,7 @@ func copyStatic() error {
    publishDir := helpers.AbsPathify(viper.GetString(&amp;quot;PublishDir&amp;quot;)) + &amp;quot;/&amp;quot;
 
    syncer := fsync.NewSyncer()
+   syncer.NoTimes = true
    syncer.NoTimes = viper.GetBool(&amp;quot;notimes&amp;quot;)
    syncer.SrcFs = hugofs.SourceFs
    syncer.DestFs = hugofs.DestinationFS
diff --git a/helpers/url.go b/helpers/url.go
index dd8d750..6b234b4 100644
--- a/helpers/url.go
+++ b/helpers/url.go
@@ -16,7 +16,7 @@ package helpers
 import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/url&amp;quot;
-   &amp;quot;path/filepath&amp;quot;
+   &amp;quot;path&amp;quot;
    &amp;quot;strings&amp;quot;
 
    &amp;quot;github.com/PuerkitoBio/purell&amp;quot;
@@ -68,7 +68,7 @@ func MakePermalink(host, plink string) *url.URL {
        panic(fmt.Errorf(&amp;quot;Can&#39;t make permalink from absolute link %q&amp;quot;, plink))
    }
 
-   base.Path = filepath.Join(base.Path, p.Path)
+   base.Path = path.Join(base.Path, p.Path)
 
    // path.Join will strip off the last /, so put it back if it was there.
    if strings.HasSuffix(p.Path, &amp;quot;/&amp;quot;) &amp;amp;&amp;amp; !strings.HasSuffix(base.Path, &amp;quot;/&amp;quot;) {
@@ -84,7 +84,7 @@ func UrlPrep(ugly bool, in string) string {
        return x
    } else {
        x := PrettifyUrl(SanitizeUrl(in))
-       if filepath.Ext(x) == &amp;quot;.xml&amp;quot; {
+       if path.Ext(x) == &amp;quot;.xml&amp;quot; {
            return x
        }
        url, err := purell.NormalizeURLString(x, purell.FlagAddTrailingSlash)
@@ -100,8 +100,8 @@ func UrlPrep(ugly bool, in string) string {
 func PrettifyUrl(in string) string {
    x := PrettifyPath(in)
 
-   if filepath.Base(x) == &amp;quot;index.html&amp;quot; {
-       return filepath.Dir(x)
+   if path.Base(x) == &amp;quot;index.html&amp;quot; {
+       return path.Dir(x)
    }
 
    if in == &amp;quot;&amp;quot; {
@@ -115,17 +115,17 @@ func PrettifyUrl(in string) string {
 // /section/name/  -&amp;gt; /section/name.html
 // /section/name.html -&amp;gt; /section/name.html
 func Uglify(in string) string {
-   if filepath.Ext(in) == &amp;quot;&amp;quot; {
+   if path.Ext(in) == &amp;quot;&amp;quot; {
        if len(in) &amp;lt; 2 {
            return &amp;quot;/&amp;quot;
        }
        // /section/name/  -&amp;gt; /section/name.html
-       return filepath.Clean(in) + &amp;quot;.html&amp;quot;
+       return path.Clean(in) + &amp;quot;.html&amp;quot;
    } else {
        name, ext := FileAndExt(in)
        if name == &amp;quot;index&amp;quot; {
            // /section/name/index.html -&amp;gt; /section/name.html
-           d := filepath.Dir(in)
+           d := path.Dir(in)
            if len(d) &amp;gt; 1 {
                return d + ext
            } else {
@@ -133,7 +133,7 @@ func Uglify(in string) string {
            }
        } else {
            // /section/name.html -&amp;gt; /section/name.html
-           return filepath.Clean(in)
+           return path.Clean(in)
        }
    }
 }
diff --git a/hugolib/permalinks.go b/hugolib/permalinks.go
index 642de83..955401c 100644
--- a/hugolib/permalinks.go
+++ b/hugolib/permalinks.go
@@ -146,7 +146,8 @@ func pageToPermalinkTitle(p *Page, _ string) (string, error) {
 func pageToPermalinkFilename(p *Page, _ string) (string, error) {
    //var extension = p.Source.Ext
    //var name = p.Source.Path()[0 : len(p.Source.Path())-len(extension)]
-   return helpers.Urlize(p.Source.BaseFileName()), nil
+   return p.Source.BaseFileName(), nil
+   // return helpers.Urlize(p.Source.BaseFileName()), nil
 }
 
 // if the page has a slug, return the slug, else return the title
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>